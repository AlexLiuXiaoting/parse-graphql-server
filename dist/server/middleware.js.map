{"version":3,"sources":["server/middleware.js"],"names":["setup","buildAdditionalContext","baseContext","additionalContextFactory","schema","context","isSchemaLegit","Error","sessionToken","request","headers","authorization","Query","baseOps","Object","assign","q","Session","equalTo","first","useMasterKey","then","session","get","fetch","user"],"mappings":";;;;;;8QAAA;;QAegBA,K,GAAAA,K;;AAbhB;;AACA;;;;AACA;;;;AAEA,SAASC,sBAAT,CAAgCC,WAAhC,EAA6CC,wBAA7C,EAAuE;AACrE,MAAI,CAACA,wBAAL,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,SAAQ,OAAOA,wBAAR,KAAsC,UAAtC,GAAmDA,yBAAyBD,WAAzB,CAAnD,GACLC,wBADF;AAED;;AAEM,SAASH,KAAT,OAAoC;AAAA,MAAnBI,MAAmB,QAAnBA,MAAmB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACzC,MAAMC,gBAAgB,QAAOF,MAAP,yCAAOA,MAAP,OAAkB,QAAxC;;AAEA,MAAI,CAACE,aAAL,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,SAAO,0CAAe,mBAAW;AAC/B,QAAMC,eAAeC,QAAQC,OAAR,IAAmBD,QAAQC,OAAR,CAAgBC,aAAxD;AACA,QAAIT,cAAc,EAAEU,OAAO,mBAAY,IAAZ,CAAT,EAAlB;AACA,QAAMC,UAAU;AACdT,oBADc;AAEdC,eAASS,OAAOC,MAAP,CAAc,EAAd,EAAkBb,WAAlB,EAA+BD,uBAAuBC,WAAvB,EAAoCG,OAApC,CAA/B;AAFK,KAAhB;;AAKA,QAAI,CAACG,YAAL,EAAmB;AACjB,aAAOK,OAAP;AACD;;AAED,QAAMG,IAAI,IAAI,eAAMJ,KAAV,CAAgB,eAAMK,OAAtB,EAA+BC,OAA/B,CAAuC,cAAvC,EAAuDV,YAAvD,CAAV;;AAEA,WAAOQ,EAAEG,KAAF,CAAQ,EAAEC,cAAc,IAAhB,EAAR,EAAgCC,IAAhC,CAAqC;AAAA,aAAWC,WAAWA,QAAQC,GAAR,CAAY,MAAZ,EAAoBC,KAApB,EAAtB;AAAA,KAArC,EAAwFH,IAAxF,CAA6F,gBAAQ;AAC1GnB,oBAAc;AACZU,eAAO,mBAAYJ,YAAZ,CADK;AAEZA,kCAFY;AAGZiB;AAHY,OAAd;AAKA,aAAOX,OAAOC,MAAP,CAAcF,OAAd,EAAuB;AAC5BR,iBAASS,OAAOC,MAAP,CAAc,EAAd,EAAkBb,WAAlB,EAA+BD,uBAAuBC,WAAvB,EAAoCG,OAApC,CAA/B;AADmB,OAAvB,CAAP;AAGD,KATM,CAAP;AAUD,GAxBM,CAAP;AAyBD","file":"middleware.js","sourcesContent":["/* eslint arrow-parens: off, arrow-body-style: off, import/prefer-default-export: off */\n\nimport { graphqlExpress } from 'graphql-server-express';\nimport Parse from 'parse/node';\nimport { create as createQuery } from './lib/query';\n\nfunction buildAdditionalContext(baseContext, additionalContextFactory) {\n  if (!additionalContextFactory) {\n    return {};\n  }\n\n  return (typeof additionalContextFactory) === 'function' ? additionalContextFactory(baseContext) :\n    additionalContextFactory;\n}\n\nexport function setup({ schema, context }) {\n  const isSchemaLegit = typeof schema === 'object';\n\n  if (!isSchemaLegit) {\n    throw new Error('Invalid schema');\n  }\n\n  return graphqlExpress(request => {\n    const sessionToken = request.headers && request.headers.authorization;\n    let baseContext = { Query: createQuery(null) };\n    const baseOps = {\n      schema,\n      context: Object.assign({}, baseContext, buildAdditionalContext(baseContext, context)),\n    };\n\n    if (!sessionToken) {\n      return baseOps;\n    }\n\n    const q = new Parse.Query(Parse.Session).equalTo('sessionToken', sessionToken);\n\n    return q.first({ useMasterKey: true }).then(session => session && session.get('user').fetch()).then(user => {\n      baseContext = {\n        Query: createQuery(sessionToken),\n        sessionToken,\n        user,\n      };\n      return Object.assign(baseOps, {\n        context: Object.assign({}, baseContext, buildAdditionalContext(baseContext, context)),\n      });\n    });\n  });\n}\n"]}