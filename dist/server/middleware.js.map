{"version":3,"sources":["server/middleware.js"],"names":["setup","buildAdditionalContext","baseContext","request","context","Parse","Promise","resolve","r","then","schema","isSchemaLegit","Error","sessionToken","headers","authorization","Query","baseOps","Object","assign","additionalContext","q","Session","equalTo","first","useMasterKey","session","get","fetch","user"],"mappings":";;;;;;8QAAA;;QAiBgBA,K,GAAAA,K;;AAfhB;;AACA;;AAEA,SAASC,sBAAT,OAA0E;AAAA,MAAxCC,WAAwC,QAAxCA,WAAwC;AAAA,MAA3BC,OAA2B,QAA3BA,OAA2B;AAAA,MAAlBC,OAAkB,QAAlBA,OAAkB;AAAA,MAATC,KAAS,QAATA,KAAS;;AACxE,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,IAAIC,MAAMC,OAAV,CAAkB,mBAAW;AAClCC,cAAQ,EAAR;AACD,KAFM,CAAP;AAGD;;AAED,MAAMC,IAAK,OAAOJ,OAAR,KAAqB,UAArB,GAAkCA,QAAQF,WAAR,EAAqBC,OAArB,CAAlC,GAAkEC,OAA5E;;AAEA,SAAOI,KAAM,OAAOA,EAAEC,IAAT,KAAkB,UAAxB,GAAsCD,CAAtC,GAA0C,IAAIH,MAAMC,OAAV,CAAkB;AAAA,WAAWC,QAAQC,CAAR,CAAX;AAAA,GAAlB,CAAjD;AACD;;AAEM,SAASR,KAAT,QAA2C;AAAA,MAA1BK,KAA0B,SAA1BA,KAA0B;AAAA,MAAnBK,MAAmB,SAAnBA,MAAmB;AAAA,MAAXN,OAAW,SAAXA,OAAW;;AAChD,MAAMO,gBAAgB,QAAOD,MAAP,yCAAOA,MAAP,OAAkB,QAAxC;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,MAAI,CAACP,KAAL,EAAY;AACV,UAAM,IAAIO,KAAJ,CAAU,wBAAV,CAAN;AACD;;AAED,SAAO,yCAAe,mBAAW;AAC/B,QAAMC,eAAeV,QAAQW,OAAR,IAAmBX,QAAQW,OAAR,CAAgBC,aAAxD;AACA,QAAIb,cAAc,EAAEc,OAAO,mBAAY,IAAZ,EAAkBX,KAAlB,CAAT,EAAlB;AACA,QAAMY,UAAU,EAAEP,cAAF,EAAhB;;AAEA,QAAI,CAACG,YAAL,EAAmB;AACjB,aAAOZ,uBAAuB,EAAEC,wBAAF,EAAeC,gBAAf,EAAwBC,gBAAxB,EAAiCC,YAAjC,EAAvB,EAAiEI,IAAjE,CACL,6BAAqB;AACnB,eAAOS,OAAOC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAChCb,mBAASc,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,WAAlB,EAA+BkB,iBAA/B;AADuB,SAA3B,CAAP;AAGD,OALI,CAAP;AAMD;;AAED,QAAMC,IAAI,IAAIhB,MAAMW,KAAV,CAAgBX,MAAMiB,OAAtB,EAA+BC,OAA/B,CAAuC,cAAvC,EAAuDV,YAAvD,CAAV;;AAEA,WAAOQ,EAAEG,KAAF,CAAQ,EAAEC,cAAc,IAAhB,EAAR,EAAgChB,IAAhC,CAAqC;AAAA,aAAWiB,WAAWA,QAAQC,GAAR,CAAY,MAAZ,EAAoBC,KAApB,EAAtB;AAAA,KAArC,EAAwFnB,IAAxF,CAA6F,gBAAQ;AAC1GP,oBAAc;AACZc,eAAO,mBAAYH,YAAZ,EAA0BR,KAA1B,CADK;AAEZQ,kCAFY;AAGZgB;AAHY,OAAd;;AAMA,aAAO5B,uBAAuB,EAAEC,wBAAF,EAAeC,gBAAf,EAAwBC,gBAAxB,EAAiCC,YAAjC,EAAvB,EAAiEI,IAAjE,CACL,6BAAqB;AACnB,eAAOS,OAAOC,MAAP,CAAcF,OAAd,EAAuB;AAC5Bb,mBAASc,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,WAAlB,EAA+BkB,iBAA/B;AADmB,SAAvB,CAAP;AAGD,OALI,CAAP;AAMD,KAbM,CAAP;AAcD,GA9BM,CAAP;AA+BD","file":"middleware.js","sourcesContent":["/* eslint arrow-parens: off, arrow-body-style: off, import/prefer-default-export: off */\n\nimport { graphqlExpress } from 'apollo-server-express';\nimport { create as createQuery } from './lib/query';\n\nfunction buildAdditionalContext({ baseContext, request, context, Parse }) {\n  if (!context) {\n    return new Parse.Promise(resolve => {\n      resolve({});\n    });\n  }\n\n  const r = (typeof context) === 'function' ? context(baseContext, request) : context;\n\n  return r && (typeof r.then === 'function') ? r : new Parse.Promise(resolve => resolve(r));\n}\n\nexport function setup({ Parse, schema, context }) {\n  const isSchemaLegit = typeof schema === 'object';\n\n  if (!isSchemaLegit) {\n    throw new Error('Invalid schema');\n  }\n\n  if (!Parse) {\n    throw new Error('Parse instance missing');\n  }\n\n  return graphqlExpress(request => {\n    const sessionToken = request.headers && request.headers.authorization;\n    let baseContext = { Query: createQuery(null, Parse) };\n    const baseOps = { schema };\n\n    if (!sessionToken) {\n      return buildAdditionalContext({ baseContext, request, context, Parse }).then(\n        additionalContext => {\n          return Object.assign({}, baseOps, {\n            context: Object.assign({}, baseContext, additionalContext),\n          });\n        });\n    }\n\n    const q = new Parse.Query(Parse.Session).equalTo('sessionToken', sessionToken);\n\n    return q.first({ useMasterKey: true }).then(session => session && session.get('user').fetch()).then(user => {\n      baseContext = {\n        Query: createQuery(sessionToken, Parse),\n        sessionToken,\n        user,\n      };\n\n      return buildAdditionalContext({ baseContext, request, context, Parse }).then(\n        additionalContext => {\n          return Object.assign(baseOps, {\n            context: Object.assign({}, baseContext, additionalContext),\n          });\n        });\n    });\n  });\n}\n"]}