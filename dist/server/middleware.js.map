{"version":3,"sources":["server/middleware.js"],"names":["setup","buildAdditionalContext","baseContext","request","additionalContextFactory","Parse","Promise","as","r","then","schema","context","isSchemaLegit","Error","sessionToken","headers","authorization","Query","baseOps","Object","assign","additionalContext","q","Session","equalTo","first","useMasterKey","session","get","fetch","user"],"mappings":";;;;;;8QAAA;;QAgBgBA,K,GAAAA,K;;AAdhB;;AACA;;AAEA,SAASC,sBAAT,OAA2F;AAAA,MAAzDC,WAAyD,QAAzDA,WAAyD;AAAA,MAA5CC,OAA4C,QAA5CA,OAA4C;AAAA,MAAnCC,wBAAmC,QAAnCA,wBAAmC;AAAA,MAATC,KAAS,QAATA,KAAS;;AACzF,MAAI,CAACD,wBAAL,EAA+B;AAC7B,WAAOC,MAAMC,OAAN,CAAcC,EAAd,CAAiB,EAAjB,CAAP;AACD;;AAED,MAAMC,IAAK,OAAOJ,wBAAR,KAAsC,UAAtC,GAAmDA,yBAAyBF,WAAzB,EAAsCC,OAAtC,CAAnD,GACRC,wBADF;;AAGA,SAAOI,KAAM,OAAOA,EAAEC,IAAT,KAAkB,UAAxB,GAAsCD,CAAtC,GAA0CH,MAAMC,OAAN,CAAcC,EAAd,CAAiBC,CAAjB,CAAjD;AACD;;AAEM,SAASR,KAAT,QAA2C;AAAA,MAA1BK,KAA0B,SAA1BA,KAA0B;AAAA,MAAnBK,MAAmB,SAAnBA,MAAmB;AAAA,MAAXC,OAAW,SAAXA,OAAW;;AAChD,MAAMC,gBAAgB,QAAOF,MAAP,yCAAOA,MAAP,OAAkB,QAAxC;;AAEA,MAAI,CAACE,aAAL,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,SAAO,yCAAe,mBAAW;AAC/B,QAAMC,eAAeX,QAAQY,OAAR,IAAmBZ,QAAQY,OAAR,CAAgBC,aAAxD;AACA,QAAId,cAAc,EAAEe,OAAO,mBAAY,IAAZ,CAAT,EAAlB;AACA,QAAMC,UAAU,EAAER,cAAF,EAAhB;;AAEA,QAAI,CAACI,YAAL,EAAmB;AACjB,aAAOb,uBAAuB,EAAEC,wBAAF,EAAeC,gBAAf,EAAwBQ,gBAAxB,EAAiCN,YAAjC,EAAvB,EAAiEI,IAAjE,CACL,6BAAqB;AACnB,eAAOU,OAAOC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAChCP,mBAASQ,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,WAAlB,EAA+BmB,iBAA/B;AADuB,SAA3B,CAAP;AAGD,OALI,CAAP;AAMD;;AAED,QAAMC,IAAI,IAAIjB,MAAMY,KAAV,CAAgBZ,MAAMkB,OAAtB,EAA+BC,OAA/B,CAAuC,cAAvC,EAAuDV,YAAvD,CAAV;;AAEA,WAAOQ,EAAEG,KAAF,CAAQ,EAAEC,cAAc,IAAhB,EAAR,EAAgCjB,IAAhC,CAAqC;AAAA,aAAWkB,WAAWA,QAAQC,GAAR,CAAY,MAAZ,EAAoBC,KAApB,EAAtB;AAAA,KAArC,EAAwFpB,IAAxF,CAA6F,gBAAQ;AAC1GP,oBAAc;AACZe,eAAO,mBAAYH,YAAZ,CADK;AAEZA,kCAFY;AAGZgB;AAHY,OAAd;;AAMA,aAAO7B,uBAAuB,EAAEC,wBAAF,EAAeC,gBAAf,EAAwBQ,gBAAxB,EAAiCN,YAAjC,EAAvB,EAAiEI,IAAjE,CACL,6BAAqB;AACnB,eAAOU,OAAOC,MAAP,CAAcF,OAAd,EAAuB;AAC5BP,mBAASQ,OAAOC,MAAP,CAAc,EAAd,EAAkBlB,WAAlB,EAA+BmB,iBAA/B;AADmB,SAAvB,CAAP;AAGD,OALI,CAAP;AAMD,KAbM,CAAP;AAcD,GA9BM,CAAP;AA+BD","file":"middleware.js","sourcesContent":["/* eslint arrow-parens: off, arrow-body-style: off, import/prefer-default-export: off */\n\nimport { graphqlExpress } from 'apollo-server-express';\nimport { create as createQuery } from './lib/query';\n\nfunction buildAdditionalContext({ baseContext, request, additionalContextFactory, Parse }) {\n  if (!additionalContextFactory) {\n    return Parse.Promise.as({});\n  }\n\n  const r = (typeof additionalContextFactory) === 'function' ? additionalContextFactory(baseContext, request) :\n    additionalContextFactory;\n\n  return r && (typeof r.then === 'function') ? r : Parse.Promise.as(r);\n}\n\nexport function setup({ Parse, schema, context }) {\n  const isSchemaLegit = typeof schema === 'object';\n\n  if (!isSchemaLegit) {\n    throw new Error('Invalid schema');\n  }\n\n  return graphqlExpress(request => {\n    const sessionToken = request.headers && request.headers.authorization;\n    let baseContext = { Query: createQuery(null) };\n    const baseOps = { schema };\n\n    if (!sessionToken) {\n      return buildAdditionalContext({ baseContext, request, context, Parse }).then(\n        additionalContext => {\n          return Object.assign({}, baseOps, {\n            context: Object.assign({}, baseContext, additionalContext),\n          });\n        });\n    }\n\n    const q = new Parse.Query(Parse.Session).equalTo('sessionToken', sessionToken);\n\n    return q.first({ useMasterKey: true }).then(session => session && session.get('user').fetch()).then(user => {\n      baseContext = {\n        Query: createQuery(sessionToken),\n        sessionToken,\n        user,\n      };\n\n      return buildAdditionalContext({ baseContext, request, context, Parse }).then(\n        additionalContext => {\n          return Object.assign(baseOps, {\n            context: Object.assign({}, baseContext, additionalContext),\n          });\n        });\n    });\n  });\n}\n"]}