{"version":3,"sources":["server/middleware.js"],"names":["setup","schema","isSchemaLegit","Error","sessionToken","request","headers","authorization","baseOps","context","Query","q","Session","equalTo","first","useMasterKey","then","session","get","fetch","Object","assign","user"],"mappings":";;;;;;8QAAA;;QAMgBA,K,GAAAA,K;;AAJhB;;AACA;;;;AACA;;;;AAEO,SAASA,KAAT,OAA2B;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AAChC,MAAMC,gBAAgB,QAAOD,MAAP,yCAAOA,MAAP,OAAkB,QAAxC;;AAEA,MAAI,CAACC,aAAL,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,SAAO,0CAAe,mBAAW;AAC/B,QAAMC,eAAeC,QAAQC,OAAR,IAAmBD,QAAQC,OAAR,CAAgBC,aAAxD;AACA,QAAMC,UAAU;AACdP,oBADc;AAEdQ,eAAS;AACPC,eAAO,mBAAY,IAAZ;AADA;AAFK,KAAhB;;AAOA,QAAI,CAACN,YAAL,EAAmB;AACjB,aAAOI,OAAP;AACD;;AAED,QAAMG,IAAI,IAAI,eAAMD,KAAV,CAAgB,eAAME,OAAtB,EAA+BC,OAA/B,CAAuC,cAAvC,EAAuDT,YAAvD,CAAV;;AAEA,WAAOO,EAAEG,KAAF,CAAQ,EAAEC,cAAc,IAAhB,EAAR,EAAgCC,IAAhC,CAAqC;AAAA,aAAWC,WAAWA,QAAQC,GAAR,CAAY,MAAZ,EAAoBC,KAApB,EAAtB;AAAA,KAArC,EAAwFH,IAAxF,CAA6F,gBAAQ;AAC1G,aAAOI,OAAOC,MAAP,CAAcb,OAAd,EAAuB;AAC5BC,iBAAS;AACPC,iBAAO,mBAAYN,YAAZ,CADA;AAEPA,oCAFO;AAGPkB;AAHO;AADmB,OAAvB,CAAP;AAOD,KARM,CAAP;AASD,GAxBM,CAAP;AAyBD","file":"middleware.js","sourcesContent":["/* eslint arrow-parens: off, arrow-body-style: off, import/prefer-default-export: off */\n\nimport { graphqlExpress } from 'graphql-server-express';\nimport Parse from 'parse/node';\nimport { create as createQuery } from './lib/query';\n\nexport function setup({ schema }) {\n  const isSchemaLegit = typeof schema === 'object';\n\n  if (!isSchemaLegit) {\n    throw new Error('Invalid schema');\n  }\n\n  return graphqlExpress(request => {\n    const sessionToken = request.headers && request.headers.authorization;\n    const baseOps = {\n      schema,\n      context: {\n        Query: createQuery(null),\n      },\n    };\n\n    if (!sessionToken) {\n      return baseOps;\n    }\n\n    const q = new Parse.Query(Parse.Session).equalTo('sessionToken', sessionToken);\n\n    return q.first({ useMasterKey: true }).then(session => session && session.get('user').fetch()).then(user => {\n      return Object.assign(baseOps, {\n        context: {\n          Query: createQuery(sessionToken),\n          sessionToken,\n          user,\n        },\n      });\n    });\n  });\n}\n"]}