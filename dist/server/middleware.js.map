{"version":3,"sources":["server/middleware.js"],"names":["setup","buildAdditionalContext","baseContext","request","additionalContextFactory","Promise","as","r","then","schema","context","isSchemaLegit","Error","sessionToken","headers","authorization","Query","baseOps","Object","assign","additionalContext","q","Session","equalTo","first","useMasterKey","session","get","fetch","user"],"mappings":";;;;;;8QAAA;;QAiBgBA,K,GAAAA,K;;AAfhB;;AACA;;;;AACA;;;;AAEA,SAASC,sBAAT,CAAgCC,WAAhC,EAA6CC,OAA7C,EAAsDC,wBAAtD,EAAgF;AAC9E,MAAI,CAACA,wBAAL,EAA+B;AAC7B,WAAO,eAAMC,OAAN,CAAcC,EAAd,CAAiB,EAAjB,CAAP;AACD;;AAED,MAAMC,IAAK,OAAOH,wBAAR,KAAsC,UAAtC,GAAmDA,yBAAyBF,WAAzB,EAAsCC,OAAtC,CAAnD,GACRC,wBADF;;AAGA,SAAOG,KAAM,OAAOA,EAAEC,IAAT,KAAkB,UAAxB,GAAsCD,CAAtC,GAA0C,eAAMF,OAAN,CAAcC,EAAd,CAAiBC,CAAjB,CAAjD;AACD;;AAEM,SAASP,KAAT,OAAoC;AAAA,MAAnBS,MAAmB,QAAnBA,MAAmB;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AACzC,MAAMC,gBAAgB,QAAOF,MAAP,yCAAOA,MAAP,OAAkB,QAAxC;;AAEA,MAAI,CAACE,aAAL,EAAoB;AAClB,UAAM,IAAIC,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,SAAO,yCAAe,mBAAW;AAC/B,QAAMC,eAAeV,QAAQW,OAAR,IAAmBX,QAAQW,OAAR,CAAgBC,aAAxD;AACA,QAAIb,cAAc,EAAEc,OAAO,mBAAY,IAAZ,CAAT,EAAlB;AACA,QAAMC,UAAU,EAAER,cAAF,EAAhB;;AAEA,QAAI,CAACI,YAAL,EAAmB;AACjB,aAAOZ,uBAAuBC,WAAvB,EAAoCC,OAApC,EAA6CO,OAA7C,EAAsDF,IAAtD,CAA2D,6BAAqB;AACrF,eAAOU,OAAOC,MAAP,CAAc,EAAd,EAAkBF,OAAlB,EAA2B;AAChCP,mBAASQ,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,WAAlB,EAA+BkB,iBAA/B;AADuB,SAA3B,CAAP;AAGD,OAJM,CAAP;AAKD;;AAED,QAAMC,IAAI,IAAI,eAAML,KAAV,CAAgB,eAAMM,OAAtB,EAA+BC,OAA/B,CAAuC,cAAvC,EAAuDV,YAAvD,CAAV;;AAEA,WAAOQ,EAAEG,KAAF,CAAQ,EAAEC,cAAc,IAAhB,EAAR,EAAgCjB,IAAhC,CAAqC;AAAA,aAAWkB,WAAWA,QAAQC,GAAR,CAAY,MAAZ,EAAoBC,KAApB,EAAtB;AAAA,KAArC,EAAwFpB,IAAxF,CAA6F,gBAAQ;AAC1GN,oBAAc;AACZc,eAAO,mBAAYH,YAAZ,CADK;AAEZA,kCAFY;AAGZgB;AAHY,OAAd;;AAMA,aAAO5B,uBAAuBC,WAAvB,EAAoCC,OAApC,EAA6CO,OAA7C,EAAsDF,IAAtD,CAA2D,6BAAqB;AACrF,eAAOU,OAAOC,MAAP,CAAcF,OAAd,EAAuB;AAC5BP,mBAASQ,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,WAAlB,EAA+BkB,iBAA/B;AADmB,SAAvB,CAAP;AAGD,OAJM,CAAP;AAKD,KAZM,CAAP;AAaD,GA5BM,CAAP;AA6BD","file":"middleware.js","sourcesContent":["/* eslint arrow-parens: off, arrow-body-style: off, import/prefer-default-export: off */\n\nimport { graphqlExpress } from 'apollo-server-express';\nimport Parse from 'parse/node';\nimport { create as createQuery } from './lib/query';\n\nfunction buildAdditionalContext(baseContext, request, additionalContextFactory) {\n  if (!additionalContextFactory) {\n    return Parse.Promise.as({});\n  }\n\n  const r = (typeof additionalContextFactory) === 'function' ? additionalContextFactory(baseContext, request) :\n    additionalContextFactory;\n\n  return r && (typeof r.then === 'function') ? r : Parse.Promise.as(r);\n}\n\nexport function setup({ schema, context }) {\n  const isSchemaLegit = typeof schema === 'object';\n\n  if (!isSchemaLegit) {\n    throw new Error('Invalid schema');\n  }\n\n  return graphqlExpress(request => {\n    const sessionToken = request.headers && request.headers.authorization;\n    let baseContext = { Query: createQuery(null) };\n    const baseOps = { schema };\n\n    if (!sessionToken) {\n      return buildAdditionalContext(baseContext, request, context).then(additionalContext => {\n        return Object.assign({}, baseOps, {\n          context: Object.assign({}, baseContext, additionalContext),\n        });\n      });\n    }\n\n    const q = new Parse.Query(Parse.Session).equalTo('sessionToken', sessionToken);\n\n    return q.first({ useMasterKey: true }).then(session => session && session.get('user').fetch()).then(user => {\n      baseContext = {\n        Query: createQuery(sessionToken),\n        sessionToken,\n        user,\n      };\n\n      return buildAdditionalContext(baseContext, request, context).then(additionalContext => {\n        return Object.assign(baseOps, {\n          context: Object.assign({}, baseContext, additionalContext),\n        });\n      });\n    });\n  });\n}\n"]}