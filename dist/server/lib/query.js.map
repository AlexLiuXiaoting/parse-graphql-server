{"version":3,"sources":["server/lib/query.js"],"names":["create","buildOptions","options","sessionToken","Object","assign","Parse","BasicQuery","objectClass","ObjectClass","attributes","Query","objectId"],"mappings":";;;;;;;;;;QAMgBA,M,GAAAA,M;;AAJhB;;;;;;+eAFA;;AAIA,IAAMC,eAAe,SAAfA,YAAe,CAACC,OAAD,EAAUC,YAAV;AAAA,SAA2BC,OAAOC,MAAP,CAAcH,WAAW,EAAzB,EAA6B,EAAEC,0BAAF,EAA7B,CAA3B;AAAA,CAArB;;AAEO,SAASH,MAAT,CAAgBG,YAAhB,EAA8BG,KAA9B,EAAqC;AAC1C,MAAI,CAACH,YAAL,EAAmB;AAAA,QACXI,UADW;AAAA;;AAEf,0BAAYC,WAAZ,EAAyB;AAAA;;AAAA,4HACjBA,WADiB;;AAEvB,cAAKC,WAAL,GAAmBD,WAAnB;AAFuB;AAGxB;;AALc;AAAA;AAAA,iCAOS;AAAA,cAAjBE,UAAiB,uEAAJ,EAAI;;AACtB,iBAAO,IAAI,KAAKD,WAAT,CAAqBC,UAArB,CAAP;AACD;AATc;;AAAA;AAAA,MACQJ,MAAMK,KADd;;AAYjB,WAAOJ,UAAP;AACD;;AAdyC,MAgBpCI,KAhBoC;AAAA;;AAiBxC,mBAAYH,WAAZ,EAAyB;AAAA;;AAAA,iHACjB,mBAAYA,WAAZ,EAAyBL,YAAzB,CADiB;;AAEvB,aAAKM,WAAL,GAAmB,mBAAYD,WAAZ,EAAyBL,YAAzB,CAAnB;AAFuB;AAGxB;;AApBuC;AAAA;AAAA,+BAsBhB;AAAA,YAAjBO,UAAiB,uEAAJ,EAAI;;AACtB,eAAO,IAAI,KAAKD,WAAT,CAAqBC,UAArB,CAAP;AACD;AAxBuC;AAAA;AAAA,4BA0BlCR,OA1BkC,EA0BzB;AACb,mHAAmBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAnB;AACD;AA5BuC;AAAA;AAAA,2BA8BnCD,OA9BmC,EA8B1B;AACZ,kHAAkBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAlB;AACD;AAhCuC;AAAA;AAAA,4BAkClCD,OAlCkC,EAkCzB;AACb,mHAAmBD,aAAaC,OAAb,EAAsBC,YAAtB,CAAnB;AACD;AApCuC;AAAA;AAAA,0BAsCpCS,QAtCoC,EAsC1BV,OAtC0B,EAsCjB;AACrB,iHAAiBU,QAAjB,EAA2BX,aAAaC,OAAb,EAAsBC,YAAtB,CAA3B;AACD;AAxCuC;;AAAA;AAAA,IAgBtBG,MAAMK,KAhBgB;;AA2C1C,SAAOA,KAAP;AACD","file":"query.js","sourcesContent":["/* eslint import/prefer-default-export: off */\n\nimport { create as createModel } from './model';\n\nconst buildOptions = (options, sessionToken) => Object.assign(options || {}, { sessionToken });\n\nexport function create(sessionToken, Parse) {\n  if (!sessionToken) {\n    class BasicQuery extends Parse.Query {\n      constructor(objectClass) {\n        super(objectClass);\n        this.ObjectClass = objectClass;\n      }\n\n      create(attributes = {}) {\n        return new this.ObjectClass(attributes);\n      }\n    }\n\n    return BasicQuery;\n  }\n\n  class Query extends Parse.Query {\n    constructor(objectClass) {\n      super(createModel(objectClass, sessionToken));\n      this.ObjectClass = createModel(objectClass, sessionToken);\n    }\n\n    create(attributes = {}) {\n      return new this.ObjectClass(attributes);\n    }\n\n    count(options) {\n      return super.count(buildOptions(options, sessionToken));\n    }\n\n    find(options) {\n      return super.find(buildOptions(options, sessionToken));\n    }\n\n    first(options) {\n      return super.first(buildOptions(options, sessionToken));\n    }\n\n    get(objectId, options) {\n      return super.get(objectId, buildOptions(options, sessionToken));\n    }\n  }\n\n  return Query;\n}\n"]}